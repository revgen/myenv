#!/bin/sh
# ############################################################################
## Command line interface to work with api.flumewater.com.
##
## Usage: {SCRIPT_NAME} <command> [device_id] [time-from] [time-to]
## Commands:
##   login      - login to the api and get JWT
##   config     - show default config values
##   devices    - show all devices
##   user       - show user info
##   usage      - show usage for the selected period of time
##
## Options:
##   time-from, time-to         - time in the 'YYYY-MM-DD HH:MM:SS' format
##
## System environment or config values:
##   FLUMEWATER_CLIENT_ID       - need to connect to the API
##   FLUMEWATER_CLIENT_SECRET   - need to connect to the API
##   FLUMEWATER_USERNAME        - need to connect to the API
##   FLUMEWATER_PASSWORD        - need to connect to the API
##   FLUMEWATER_BUCKET          - measure usage periods unit (default: HR)
##                                (MIN, HR, DAY, MON, YR)
##   FLUMEWATER_JWT_FILE        - cache file to store JWT
##   DEBUG                      - true: verbose output
##
## Config files:
##   /etc/flumewater.conf
##   ~/.config/flumewater.conf
##
## Dependencies: base64, tr, curl, jq
##
#  Author: Evgen Rusakov (https://github.com/revgen)
#
# ############################################################################
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
    exit 1
}

API_URL="https://api.flumewater.com"
NAME=flumewater
# We need to use gdate on the MacOS
date_app=$(which gdate || which date)
debug() { if [ "${DEBUG}" == "true" ]; then >&2 echo $@; fi; }

try_load_config_file() { [ -f "${1}" ] && debug "Load config file ${1}" && . "${1}"; }

load_config() {
    debug "Load configuration"
    try_load_config_file "/etc/${NAME}.conf"
    try_load_config_file "${HOME}/.config/${NAME}.conf"
    try_load_config_file "${HOME}/.${NAME}.conf"

    CLIENT_ID="${FLUMEWATER_CLIENT_ID:-"xxxxxxxxxxxxxxx"}"
    CLIENT_SECRET="${FLUMEWATER_CLIENT_SECRET:-"xxxxxxxxxxxxxxxxxxxx"}"
    USERNAME="${FLUMEWATER_USERNAME:-"user@example.com"}"
    PASSWORD="${FLUMEWATER_PASSWORD:-"secret-password"}"
    # Bucket values: MIN, HR, DAY, MON, YR
    BUCKET="${FLUMEWATER_BUCKET:-"HR"}"
    JWT_FILE="${FLUMEWATER_JWT_FILE:-"${HOME}/.cache/flumewater.key"}"
    mkdir -p "$(dirname "${JWT_FILE}")"
    debug "Config: username=${USERNAME}, client=${CLIENT_ID}, key_file=${JWT_FILE}"
}

# Normalize base64 string  ( padding with "=" and decode it
base64_decode() {
    data_base64=$(cat)
    local m=$(( ${#data_base64} % 4))
    if [ $m -eq 2 ]; then data_base64="${data_base64}==";
    elif [ $m -eq 3 ]; then data_base64="${data_base64}="; fi
    echo "${data_base64}" | tr '_-' '/+' | base64 --decode
}
payload_from_jwt() { cut -d. -f2 | base64_decode; }
get_jwt() { cat "${JWT_FILE}"; }
get_user_id() { jwt=${1}; echo "${jwt}" | payload_from_jwt | jq -r '.user_id'; }
assert_user() { if [ -z "${1}" ]; then echo "Error: incorrect JWT. Did you make a login?"; exit 1; fi; }

show_config() {
    echo "# Example config file: ~/.config/flumewater.conf"
    echo "export FLUMEWATER_CLIENT_ID=${CLIENT_ID}"
    echo "export FLUMEWATER_CLIENT_SECRET=${CLIENT_SECRET}"
    echo "export FLUMEWATER_USERNAME=${USERNAME}"
    echo "export FLUMEWATER_PASSWORD=${PASSWORD}"
}

login() {
    data="{ \"grant_type\":\"password\",
    \"client_id\":\"${CLIENT_ID}\", \"client_secret\":\"${CLIENT_SECRET}\",
    \"username\":\"${USERNAME}\", \"password\":\"${PASSWORD}\"}"
    
    tmp_file=$(mktemp)
    debug "Login to the ${API_URL} and get token"
    curl -s --request POST --url "${API_URL}/oauth/token" \
        -H 'content-type: application/json' \
        --data "${data}" | jq '.' > "${tmp_file}" || exit 1

    jwt="$(jq -r '.data[].access_token' "${tmp_file}")"
    if [ -z "${jwt}" ]; then echo "Error login: can't get JWT."; exit 1; fi
    echo "${jwt}" > "${JWT_FILE}"
    debug "Received JWT: ${jwt}"
    debug "Session: $(cat "${JWT_FILE}" | payload_from_jwt)"
    rm -f "${tmp_file}"
}


get_user() {
    debug "Get user information"
    jwt=$(get_jwt)
    user_id=$(get_user_id "${jwt}")
    assert_user "${user_id}"
    debug "UserId=${user_id}, JWT=${jwt}"
    curl -s --request GET --url "${API_URL}/users/${user_id}" \
        -H "content-type: application/json" \
        -H "Authorization: Bearer ${jwt}" || exit 1
}

get_devices() {
    debug "Get devices for user"
    jwt=$(get_jwt)
    user_id=$(get_user_id "${jwt}")
    assert_user "${user_id}"
    debug "UserId=${user_id}, JWT=${jwt}"
    curl -s --request GET --url "${API_URL}/users/${user_id}/devices" \
        -H "content-type: application/json" \
        -H "Authorization: Bearer ${jwt}" || exit 1
}

get_default_device_id() {
    debug "Get id for the first meter"
    device_id="$(get_devices | jq -r '.data[] | select (.type == 2)  | .id' | head -n 1)"
    debug "Found device_id = ${device_id}"
    echo "${device_id}"
}

get_device_info() {
    debug "Get device information"
    jwt=$(get_jwt)
    user_id=$(get_user_id "${jwt}")
    assert_user "${user_id}"
    device_id=${1:-"$(get_default_device_id)"}
    debug "UserId=${user_id}, DeviceId=${device_id}, JWT=${jwt}"
    curl -s --request GET --url "${API_URL}/users/${user_id}/devices/${device_id}" \
        -H "content-type: application/json" \
        -H "Authorization: Bearer ${jwt}" || exit 1
}

get_device_usage() {
    debug "Get device usage (bucket=${BUCKET})"
    jwt=$(get_jwt)
    user_id=$(get_user_id "${jwt}")
    assert_user "${user_id}"
    device_id=${1:-"$(get_default_device_id)"}
    time_from="${2:-"today"}"
    time_to="${3}"
    case "${time_from}" in
        today)
	    time_from="$(${date_app} +"%Y-%m-%d") 00:00:00"
	    time_to="${3:-"$(${date_app} +"%Y-%m-%d %H:%M:00")"}"
	    ;;
	yesterday)
	    time_from=$(${date_app} -d @$(( $(date +"%s") - 86400)) +"%Y-%m-%d 00:00:00")
	    ;;
    esac
    if [ -z "${time_to}" ]; then
        time_to="${3:-"$(${date_app} -d @$(( $(${date_app} -d "${time_from}" +"%s") + 86399)) +"%Y-%m-%d %H:%M:00")"}"
    fi
    
    jwt=$(get_jwt)
    user_id=$(get_user_id "${jwt}")
    debug "UserId=${user_id}, DeviceId=${device_id}, JWT=${jwt}"
    debug "Usage (${BUCKET}) for period: ${time_from} - ${time_to}"
    queries="{ \"queries\": [
    {
        \"request_id\": \"${RANDOM}\",
        \"bucket\": \"${BUCKET}\",
	\"since_datetime\": \"${time_from}\",
	\"until_datetime\": \"${time_to}\"
    }]}"
    curl -s --request POST --url "${API_URL}/users/${user_id}/devices/${device_id}/query" \
        -H "content-type: application/json" \
        -H "authorization: Bearer ${jwt}" \
        --data "${queries}" || exit 1
}

cmd="${1:-"help"}"
case "${cmd}" in
    login) load_config && login;;
    config) load_config && show_config;;
    devices) load_config && get_devices;;
    user) load_config && get_user;;
    usage) load_config && get_device_usage "${2}" "${3}" "${4}";;
    help|--help|-h) show_help;;
    *) echo "Error: unknown '${1}' command"; exit 1;;
esac


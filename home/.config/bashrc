#==============================================================================
# Custom user bashrc file settings
#==============================================================================
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if echo "${SHELL}" | grep -q "/bash$"; then
  echo "Configuration file ${0} can be loaded in bash environment only. Skip."
  return
fi

case "$OSTYPE" in
  linux*)
    if grep "Microsoft\|WSL" /proc/sys/kernel/osrelease > /dev/null; then export OSNAME=wsl;
    else export OSNAME=linux; fi
    ;;
  solaris*) export OSNAME=solaris ;;
  darwin*)  export OSNAME=macos ;; 
  bsd*)     export OSNAME=bsd ;;
  msys*)    export OSNAME=windows ;;
  cygwin*)  export OSNAME=windows ;;
  *)        export OSNAME=unknown ;;
esac
export OSTYPE="${OSTYPE}"
export MYENVHOME="${MYENVHOME:-"${HOME}/.local/src/myenv"}"
export PATH="${HOME}/.local/bin:${WORKSPACE}/bin:${HOME}/bin:$PATH"
export EDITOR=$(which nvim || which vim || which vi)
export USERBIN="${HOME}/.local/bin"
export WORKSPACE="${HOME}/Workspace"


export PYTHONWARNINGS="ignore"

[ ! -d "${USERBIN}" ] && mkdir -p "${USERBIN}" >/dev/null

# --[ Terminal settings ]------------------------------------------------------
if [[ $TERM == *color ]]; then
    color_prompt=yes
    export PS1="\033[0;32m\u@\h\033[0m:\033[1;34m\W\033[0m\$ "
else
    export PS1="\u@\h:\W\$ "
fi

# ------[ Tool's settings ]----------------------------------------------------
stty stop '';                                   # Fix Ctrl+S inside the vim
export GPG_TTY='tty';                           # need for gnupg.vim plugin

# ------[ Console History ]----------------------------------------------------
export HISTCONTROL=ignoreboth;      # Don't add similar command in the history
shopt -s histappend;                # Store command into the history immediately
PROMPT_COMMAND='history -a'
export HISTSIZE=9999;               # Store more commands in the history

# Prevent tar and other programs from giving special meaning to ._* archive members
export COPYFILE_DISABLE=1

# --[ Aliases ]----------------------------------------------------------------
alias ll='ls -ahl'
alias l='ll'
alias ltree='ls -R|grep ":$"|sed -e "s/:$//" -e "s/[^-][^\/]*\//--/g" -e "s/^/   /" -e "s/-/|/"'
alias ..='cd ..'
alias ...='cd ../..'
which nvim >/dev/null && alias vim='nvim'
alias c='clear'
alias :q='exit'
alias lynx='lynx -accept_all_cookies'
alias lower='tr "[:upper:]" "[:lower:]"'
alias upper='tr "[:lower:]" "[:upper:]"'
alias newline_to_comma="awk '{printf\"%s%s\",c,$0;c=\", \"}'"
alias line_number='awk '\''{printf("% 6d %s\n", NR, $0)}'\'
alias tree='tree -N'
alias edit=${EDITOR}
alias v='edit'
alias j='jobs -l'
alias tig='tig --all'
alias hex='xxd'
alias tohex='xxd -p'
alias fromhex='xxd -p -r'
alias ws='cd ${WORKSPACE}; pwd'
alias mp3tag='kid3'

alias vd='LC_ALL="${LC_ALL:-"en_US.UTF-8"}" vd'
alias csvview='vd'

# ------[ Custom tools ]-------------------------------------------------------
ls-recursively() { find ${1:-"${PWD}"} -type f -print0 | xargs -0 ls -al; }

mkcd() {
    case "${1:---help}" in
        help|--help)
            echo "Create directory and go into"
            echo "Usage: mkcd <directory name>" ;;
        *)
            if [ ! -d "$1" ]; then mkdir -p "$@" && cd $_ ;
            else cd $1; fi
            ;;
    esac
}
cpx() {
    if [ "${1:-"--help"}" == "--help" ] || [ -z "${2}" ]; then
        echo "Script to copy files with progress. Using pv tool or rsync."
        echo "Usage: cpx source_file target_file"
	return 1
    fi
    if which pv >/dev/null; then
        pv "${1}" > "${2}"
    else
        # -WavP --human-readable
        rsync -avhW --progress "${1}" "${2}"
    fi
}
mkcd-now() { mkcd $(date +"%Y%m%d-%H%M%S"); }
mkcd-today() { mkcd $(date +"%Y%m%d"); }
echo_log() { echo $(date +"%Y-%m-%dT%H:%M:%S ") $@; }
alias echo-log=echo_log

# --[ Additional bashrc files ]------------------------------------------------
[ -r "${MYENVHOME}/home/.config/bashrc_extra" ] && . "${MYENVHOME}/home/.config/bashrc_extra"
[ -r "${MYENVHOME}/home/.config/bashrc_${OSNAME}" ] && . "${MYENVHOME}/home/.config/bashrc_${OSNAME}"
[ -r "${MYENVHOME}/home/.config/bashrc_extra_${OSNAME}" ] && . "${MYENVHOME}/home/.config/bashrc_extra_${OSNAME}"
[ -r "${HOME}/.bashrc_${USER}" ] && . "${HOME}/.bashrc_${USER}"

if [ -z "${TERM_PROGRAM}" ]; then       # do not show additional information in not regular terminals
    # ------[ Customer welcome screen ]--------------------------------------------
    if [ -f "${MYENVHOME}/home/.config/user-welcome-${OSNAME}" ]; then
        "${MYENVHOME}/home/.config/user-welcome-${OSNAME}"
    else if [ -f "${MYENVHOME}/home/.config/user-welcome" ]; then
        "${MYENVHOME}/home/.config/user-welcome"
    fi; fi

    if [ ! -f "${HOME}/.selected_editor" ] && [ -n "$(ls /usr/bin/select-editor 2>/dev/null)" ]; then
        /usr/bin/select-editor
    fi
fi

# --[ Log ] -------------------------------------------------------------------
if [ -n "$DISPLAY" ]; then
    logger -t "${USER}"  "bash: init X-session"
elif [ -n "$SSH_TTY" ]; then
    logger -t "${USER}"  "bash: init ssh session [$SSH_CLIENT,$SSH_CONNECTION]"
fi

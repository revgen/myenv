#!/usr/bin/env bash
# ############################################################################
## Show system information
## Usage: {SCRIPT_NAME} [--border] [--full] [--banner]
## Dependencies:
##   inxi - this tool need for to show full system information (--full)
# ############################################################################
#set -e
set -o pipefail
#-----------------------------------------------------------------------------

if [ "$(uname -s)" == "Darwin" ]; then ostype="macos";
else
  if cat /proc/sys/kernel/osrelease 2>/dev/null | grep -q "Microsoft\|WSL"; then ostype="wsl";
  else ostype="linux"; fi
fi
#-----------------------------------------------------------------------------

localnet() {
  (if which ifconfig >/dev/null; then
    ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | xargs | sed 's/ /,/g'
  else
    ip addr show | grep "inet " | grep -v "127.0.0.1" | cut -d"/" -f1 | sed 's/[ ]*inet[ ]*//g'
  fi
  wireless
  ) | xargs
}
wireless() {
  (if [ "${ostype}" == "macos" ]; then
    /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -I | awk -F: '/ SSID/{gsub(/^[ \t]+/, "", $2); print $2}'
  else
    echo "N/A"
  fi) | grep -v "^$" | sed 's/^/[WiFi: /g' | sed 's/$/]/g'
}
internet() {
	(curl -sL http://checkip.amazonaws.com || echo "ERROR") | xargs
}
active_users() {
  w -h | awk '{print $1}' | sort -r | uniq -c | awk '{printf"%s%s (%d)",c,$2,$1;c=", "}'; echo ""
}
os_info() {
    if [ "${ostype}" == "macos" ]; then
      sw_vers | grep Product | cut -d":" -f2 | xargs; return 0;
    fi
    if [ -f "/etc/os-release" ]; then
        name=$(grep "^NAME\|VERSION_ID" /etc/os-release | sort |  sed 's/NAME=//g' | sed 's/VERSION_ID=//g' | sed 's/"//g' | xargs)
        if [ $"{ostype}" == "wsl" ]; then echo "${name} [WSL]";
        else echo "${name}"; fi
        return 0
    fi
    if [ -n "$(which lsb_release)" ]; then lsb_release -d | sed 's/Description:[\t ]*//g'; return 0; fi
    if [ -f /etc/debian_version ]; then echo "Debian $(cat /etc/debian_version)"; return 0; fi
    uname -sr
}
platform() {
    uname -m | sed 's/x86_/x/g' | sed 's/amd/x/g'
}
processor() {
  (if [ "${ostype}" == "macos" ]; then sysctl -n machdep.cpu.brand_string;
  else (cat /proc/cpuinfo | grep Hardware | cut -d":" -f2 | sed 's/^ //g'; uname -m) | xargs; fi
  echo "($(nproc))") | xargs
}
load_average() {
  uptime | cut -d"," -f3-5 | cut -d":" -f2 | sed 's/^[ ]*//g'
}
memory() {
  if [ "${ostype}" == "macos" ]; then sysctl vm.swapusage | awk '{print $10"/"$4}';
  else cat /proc/meminfo  | grep "MemTotal\|MemFree" | sort | cut -d":" -f2 | sed 's/ //g' | xargs | sed 's/ /\//g'; fi
}
started() {
  if [ "${ostype}" == "macos" ]; then
    python3 -c 'import datetime,time; print(datetime.datetime.fromtimestamp(time.time() - time.clock_gettime(time.CLOCK_MONOTONIC)).strftime("%Y-%m-%d %H:%M:%S"))'
  else uptime -s; fi
}
localtime() {
  date +"%a %d %b %Y %H:%M"
}
utctime() {
  date -u +"%a %d %b %Y %H:%M"
}
connections() {
  arp -av | sort || echo "Error: arp failed"
}
#-----------------------------------------------------------------------------

show_help() {
  sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
  exit 1
}
debug() { if [ "${DEBUG}" == "true" ]; then >&2 echo "$@"; fi; }

# write_line length begin_str end_str middle_str
write_line() { printf "${2} %-${1}s ${3}\n" "${4}"; }

write_borders() {
  tmpfile="$(mktemp)"
  debug "Temp file: ${tmpfile}"
  cat 2>/dev/null |  while read; do
    echo "${REPLY}"
    debug "${REPLY}"
  done > "${tmpfile}"

  len=$(cat "${tmpfile}" | awk '{ print length }' | sort -rn | head -1)
  write_line "${len}" "╭─" "─╮" "─" | sed "s/ /─/g"
  cat "${tmpfile}" | while read; do
    write_line "${len}" "│" "│" "${REPLY}"
  done
  write_line "${len}" "╰─" "─╯" "─" | sed "s/ /─/g"
  rm -f "${tmpfile}"
}

#-----------------------------------------------------------------------------
show_banner() {
    if [ -n "${FIGLET_APP}" ]; then
        echo -en "${COLOR_NAVY}"
        hostname | "${FIGLET_APP}"
        echo -en "${COLOR_RESET}"
    else
        echo -e "${COLOR_WHITE}Hostname:${COLOR_RESET}${COLOR_NAVY} $(hostname)${COLOR_RESET}"
    fi
    tty_info=
    if [ "${SSH_TTY}" ]; then tty_info="ssh: $(echo "${SSH_CLIENT}" | cut -d" " -f1)"; fi
    if [ "${STY}" ]; then tty_info="$(echo "${tty_info} screen: ${STY}" | sed 's/^[ ]*//g')"; fi

    echo -ne  "${COLOR_WHITE}   Users:${COLOR_RESET}${COLOR_BLUE} $(active_users)${COLOR_RESET}"
    if [ -z "${tty_info}" ]; then echo "";
    else echo -e " ${COLOR_RED}[${tty_info}]${COLOR_RESET}"; fi
    echo -ne "${COLOR_WHITE}  System:${COLOR_RESET}${COLOR_GREEN} $(os_info) ($(platform))${COLOR_RESET} "
    echo -e  "[${COLOR_WHITE}started:${COLOR_RESET}${COLOR_VIOLET} $(started)${COLOR_RESET}]"
    echo -e "${COLOR_WHITE} Address:${COLOR_RESET}${COLOR_YELLOW} $(localnet)${COLOR_RESET}"
}

show_sys_info() {
  printf "hostname : "; hostname
  printf "users    : "; active_users
  echo   "system   : $(os_info) ($(platform))"
  printf "processor: "; processor
  printf "load avg.: "; load_average
  printf "memory   : "; memory
  printf "localnet : "; localnet
  printf "internet : "; internet
  printf "started  : "; started
  printf "localtime: "; localtime
  printf "utc time : "; utctime
  if [ "${SHOW_CONNECTION}" == "true" ]; then echo "connections:"; connections; fi
}
#-----------------------------------------------------------------------------

main() {
  for i in "$@"; do
    case "${i}" in
      --border)     BORDER=true ;;
      --banner)     BANNER=true ;;
      --full|--all) FULL_INFO=true ;;
      --connection) SHOW_CONNECTION=true ;;
      --help|help)  show_help ;;
    esac
  done

  if [ "${BORDER}" == "true" ]; then
    if [ "${FULL_INFO}" ]; then inxi -mF | write_borders;
    else if [ "${BANNER}" == "true" ]; then show_banner | write_borders;
         else show_sys_info | write_borders; fi
    fi
  else
    FIGLET_APP=$(which figlet 2> /dev/null)
    COLOR_RESET='\033[0m'
    COLOR_WHITE='\033[97m\033[1m'
    COLOR_BLUE='\033[96m'
    COLOR_NAVY='\033[34m'
    COLOR_GREEN='\033[32m'
    COLOR_VIOLET='\033[35m'
    COLOR_YELLOW='\033[93m'
    COLOR_RED='\033[91m'
    if [ "${FULL_INFO}" ]; then inxi -mF;
    else if [ "${BANNER}" == "true" ]; then show_banner;
         else show_sys_info; fi
    fi
  fi
}

main $@

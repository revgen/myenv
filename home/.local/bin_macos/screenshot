#!/usr/bin/env python3
###############################################################################
# TBD
###############################################################################
import os
import re
import subprocess
import sys
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Optional

HOME_DIR = Path.home()
ARCHIVED_DAYS = 1


if os.environ.get("DEBUG") == "true":
    debug = lambda msg: print(msg)
else:
    debug = lambda msg: True

info = lambda msg: print(msg)


def sys_exec(args: list[str]) -> str:
    try:
        with subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:
            response, err = proc.communicate()
        if err:
            raise ConnectionError(err.decode("utf-8").strip())
        return response.decode("utf-8").strip()
    except Exception as ex:
        raise Exception(f"Failed execute: {args}. {ex}") from ex


def get_screenshot_location() -> Path:
    debug("Getting current screenshots location...")
    try:
        ss_path = sys_exec(["defaults", "read", "com.apple.screencapture", "location"]).split(os.linesep)[0].strip()
    except Exception as ex:
        if "does not exist" in str(ex):
            debug(f"Warning read 'com.apple.screencapture.location' value: {ex}")
            ss_path = None
        else:
            raise
    screenshots_dir = Path(ss_path) if ss_path else HOME_DIR / "Desktop"
    debug(f"Screenshots location: {screenshots_dir}")
    return screenshots_dir


def get_time_from_file_name(file_name: str) -> datetime:
    fn = (file_name or "").replace("\u202f", " ").replace(".png", "").replace("at", "").replace("  ", " ")
    for mask_to_remove in (re.compile(re.escape("screenshots"), re.IGNORECASE),
                           re.compile(re.escape("screenshot"), re.IGNORECASE)):
        fn = mask_to_remove.sub("", fn).strip()
    debug(f"- Get file datetime: {fn}")
    try:
        dt = datetime.strptime(fn, "%Y-%m-%d %I.%M.%S %p").astimezone(tz=timezone.utc)
    except ValueError as ex:
        debug(f"- Error get datetime form '{file_name}': {ex}")
        raise
    return dt


def process_screenshots(screenshots_dir: Path, archive_dir: Optional[Path] = None) -> None:
    info(f"Processing all screenshots in the {screenshots_dir} directory...")
    cur_dt = datetime.now().astimezone(tz=timezone.utc)
    archive_dir  = archive_dir or screenshots_dir / str(cur_dt.year)
    debug(f"Archive directory is {archive_dir}")

    total_screenshots = 0
    total_renamed = 0
    total_archived = 0
    total_skipped = 0
    for file in screenshots_dir.glob("*.*"):
        orig_name = file.name
        if orig_name in ("README.txt",):
            continue
        total_screenshots += 1
        debug(f"Processing: {file.relative_to(HOME_DIR)}")
        if " " in orig_name and " at " in orig_name and "screenshot" in orig_name.lower():
            debug(f"- File '{orig_name}' need to be renamed.")
            file_dt = get_time_from_file_name(orig_name)
            file_dt_str = file_dt.strftime("%Y%m%d-%H%M%S")
            new_name = f"{file_dt_str}-screenshot{file.suffix}"
            total_renamed += 1
        else:
            debug(f"- File '{orig_name}' do not need to be renamed.")
            file_dt = datetime.fromtimestamp(int(file.stat().st_ctime)).astimezone(tz=timezone.utc)
            new_name = orig_name
        debug(f"- File datetime: {file_dt} (now={cur_dt})")

        if file_dt >= cur_dt - timedelta(days=ARCHIVED_DAYS):
            new_file_path = screenshots_dir / new_name
        else:
            archive_dir_for_file = archive_dir / file_dt.strftime("%Y-%m") / file_dt.strftime("%Y-%m-%d")
            archive_dir_for_file.mkdir(parents=True, exist_ok=True)
            new_file_path = archive_dir_for_file / new_name
            total_archived += 1

        if new_file_path != file:
            info(f"- Move: {orig_name} -> {new_file_path.relative_to(HOME_DIR)}")
            file.rename(new_file_path)
        else:
            debug(f"- Skip: {orig_name}, do not need to move")
            total_skipped += 1

    info(f"Processed screenshots: total={total_screenshots}, renamed={total_renamed}, "
         f"archived={total_archived}, skipped={total_skipped}")

if __name__ == "__main__":
    work_dir = Path(sys.argv[1]) if len(sys.argv) > 1 else get_screenshot_location()
    process_screenshots(work_dir)

#!/bin/bash
#=============================================================================
## Console tool to work with DPF files
## Usage: {SCRIPT_NAME} <command> [options] [file1] [file2] ...
##
## Commands:
##   info       - show details information about a file
##   merge      - combine two or more PDFs files in a single file
##   extract    - extract selected pages from the PDF file
##   encrypt    - create encrypted PDF file from the existed
##   decrypt    - decrypt encrypted PDF file and store it
##   rotate     - rotate pages in the document: clockwise, counterclockwise, 
##   booklet    - reorder the pages to create booklet from the document
##
## Options:
##   --output <file>    - specify output file
##   --beginPage <N>    -
##   --endPage <N>      -
##
#  Author: Evgen Rusakov
#
#=============================================================================
TMP=$(mktemp -d)
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
    exit 1
}

check_gs() {
    if ! which gs >/dev/null; then
        echo "Error: ghostscript not found."
        exit 1
    fi
}

show_info() {
    if ! which pdfinfo >/dev/null; then echo "Error: pdfinfo not found."; exit 1; fi
    if [ -z "${1}" ]; then
        echo -e "Error: input file is required\n"
        show_help
    fi
    echo "Information about a file"
    echo "File:           ${1}"
    # page_count=$(gs -q -dNODISPLAY -c "(${1}) (r) file runpdfbegin pdfpagecount = quit")
    pdfinfo "${1}"
}

get_page_count() {
    if [ -z "${1}" ]; then
        echo -e "Error: input file is required\n"
        show_help
    fi
    identify "${1}" 2>/dev/null | wc -l | tr -d ' '
}

create_booklet() {
    if [ -z "${1}" ]; then
        echo -e "Error: input file is required\n"
        show_help
    fi
    tmp_file=${TMP}/${RANDOM}.pdf
    echo "Create itemporary copy: ${tmp_file}"
    mkdir -p "$(dirname "${tmp_file}")" 2>/dev/null
    cp -fv "${1}" "${tmp_file}"

    echo "Create booklet from the file ${1}"
    echo "- Calculate page count first..."
    pages_orig=123
    #pages_orig=$(get_page_count "${1}")
    echo "Total pages ${pages_orig}"
    need_additional=$((4 - ${pages_orig} % 4))
    if [ "${need_additional}" != "0" ] && [ "${need_additional}" != "4" ]; then
        echo "- Add additional ${need_additional} empty pages"
    #    for i in $(seq 1 ${need_additional}); do
    #        new_file=${tmp_file}.pdfutil.${RANDOM}.tmp
    #        gs -o "${new_file}" -sDEVICE=pdfwrite -f ${tmp_file} -c showpage | grep -v '^Page ' | sed 's/^/- /g'
    #        mv "${new_file}" "${tmp_file}"
    #    done
    fi
    pages_in_group=16
    #pages_map_table="16>01\n01>02\n02>03\n15>04\n14>05\n03>06\n04>07\n13>08\n12>09\n05>10\n06>11\n11>12\n10>13\n07>14\n08>15\n09>16"
    total_pages=$((${pages_orig} + ${need_additional}))
    groups=$(( ((${total_pages} % ${pages_in_group}) + ${total_pages}) / ${pages_in_group} ))
    echo "Calculation: pages=${total_pages} -> ${pages_in_group} in group, ${groups} groups"
    for g in $(seq 1 ${groups}); do
        echo "- Group ${g}"
        idx=0
        for p in $(seq ${pages_in_group}); do
            idx=$(( ${idx} + 1 ))
            tmp_total=$(( ${p} + (${g} - 1) * ${pages_in_group} ))
            if [ ${tmp_total} -gt ${total_pages} ]; then continue; fi

            orig_name=$(printf "%05d" "${tmp_total}")
            new_number=$(echo -e "${pages_map_table}" | grep $(printf "%02d>" ${p}) | cut -d'>' -f2)
            new_name="page-$(printf "%05d" ${g}).${new_number}-${orig_name}.pdf"
            echo "- Reorder: ${orig_name} -> ${new_name}"
        done
    done





    echo "Cleanup: ${tmp_file}"
    rm -f "${tmp_file}"
}

merge() {
    check_gs
    if [ -z "${1}" ] || [ -z "${2}" || [ -z "${3}" ]; then
        echo -e "Error: output/input files are required\n"
        show_help
    fi
    output=${1}; shift
    echo "Merge PDFs file"
    echo "$@"
    echo "Result file: ${output}"
    gs -dNOPAUSE -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -dBATCH \
        -sOUTPUTFILE="${output}" \
        $@ \
    && echo "Done" && ls "${output}"
}

update() {
    if ! which exiftool >/dev/null; then echo "Error: exiftool not found."; exit 1; fi
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        echo -e "Error: input file name, field name and new value are required\n"
        show_help
    fi
    exiftool -${2}="${3}" "${1}"
    #if pdfinfo "${1}" | grep -q "${2}:"; then
    #else
    #    echo "Error: field '${2}' incorrect"
    #    return 1
    #fi
}

extract() {
    check_gs
    if [ -z "${1}" ] || [ -z "${2}" || [ -z "${3}" ]; then
        echo -e "Error: output/input files are required\n"
        show_help
    fi
### gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -sOutputFile=1111-%05d.pdf 1.pdf

# gs -sDEVICE=pdfwrite -q -dNOPAUSE -dBATCH -sOutputFile=Document1-page1.pdf -dFirstPage=1 -dLastPage=1 Document1.pdf
# 
#     # OutputFile=${3%.pdf}_p${1}-p${2}.pdf
#     source=${2}
#     firstPage=${3}
#     lastPage=${4}
#     echo "Extract pages ${firstPage}-${lastPage} from the document ${source}"
#     echo "Result file: ${output}"
#     gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
#        -dFirstPage=${firstPage} \
#        -dLastPage=${lastPage} \
#        -sOutputFile="${output}.pdf" \
#        "${source}"
}

# images_to_pdf() {
#     https://stackoverflow.com/questions/4283245/using-ghostscript-to-convert-jpeg-to-pdf
#     mask=${1}
#     viewjpeg=$(ls /usr/local/share/ghostscript/*/lib/viewjpeg.ps)
#     echo "Convert jpg files to pdf (${mask})"
#     echo "Directory: ${PWD}"
#     if [ -z "${viewjpeg}" ]; then
#         echo "Error: GhostScript viewjpeg not found."
#         return 1
#     fi
    
#     gs \
#  -sDEVICE=pdfwrite \
#  -o foo.pdf \
#     viewjpeg.ps \
#  -c "(1st.jpg)  viewJPEG showpage \
#      (2nd.jpg)  viewJPEG showpage \
#      (3rd.jpg)  viewJPEG showpage \
#      (last.jpg) viewJPEG showpage"
# }



case "$(echo ${1:-"help"} | sed 's/^[-]*//g')" in
    info) shift; show_info $@ ;;
    'get-page-count') shift; get_page_count "${1}" ;;
    merge) shift; merge $@ ;;
    extract) shift; extract $@ ;;
    booklet) shift; create_booklet $@ ;;
    create) shift; create $@ ;;
    encrypt) shift; encrypt $@ ;; 
    encrypt) shift; encrypt $@ ;;
    decrypt) shift; decrypt $@ ;;
    update) shift; update "${1}" "${2}" "${3}" "${4}" "${5}" ;;
    help|h) show_help ;;
    *) echo "Error: Unknown command ${1}"; show_help ;;
esac


#!/usr/bin/env bash
#=======================================================================
## Show system information
## Usage: {SCRIPT_NAME} [--full]
#=======================================================================
ostype=$(uname -s)
os_info() {
    if [ "${ostype}" == "Darwin" ]; then
        sw_vers | grep Product | cut -d":" -f2 | xargs
        return 0
    fi
    if [ -n "$(which lsb_release)" ]; then
        lsb_release -d | sed 's/Description:[\t ]*//g'
        return 0
    fi
    if [ -f /etc/debian_version ]; then
        echo "Debian $(cat /etc/debian_version)"
        return 0
    fi
    if [ -f "/etc/os-release" ]; then
        cat /etc/os-release | sort | grep "^NAME\|VERSION_ID" |  sed 's/NAME=//g' | sed 's/VERSION_ID=//g' | sed 's/"//g' | xargs
        return 0
    fi
    uname -mrs
}
platform() {
    uname -m | sed 's/x86_64/x64/g' | sed 's/amd64/x64/g'
}
cpu_info() {
    if [ "${ostype}" == "Darwin" ]; then
        top -l 1 -s 0 | awk ' /Processes/ || /PhysMem/ || /Load Avg/{print}' | awk -F":" '{printf "%-10s:%s\n", $1, $2}'
    else
        top -n  1 | awk ' /Cpu/ || /Mem/{print}' | awk -F":" '{printf "%-10s:%s\n", $1, $2}'
    fi
}
disk_info() {
    if [ "${ostype}" == "Darwin" ]; then
        df -h | grep "/dev/disk" | grep -v "/private" | grep -v "auto_home" | awk '{print ""$4" of "$2" available (capacity="$5") "$9}'
    else
        df -h | grep "/$\|/mnt/" | awk '{print ""$4" of "$2" available (capacity="$5") "$6}'
    fi
}
active_users() {
    w -h | cut -d " " -f1 | sort -r | uniq | awk '{printf"%s%s",c,$0;c=", "}'
}
local_ip() {
    if which ifconfig 2>&1 >/dev/null; then
        ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'
    else
        ip add show | grep "inet " | grep -v "127.0.0.1" | sed 's/\// /g' | awk '{print $2}' | sort | xargs | sed -e 's/ /, /g'
    fi
}
public_ip() {
    wget -q -O - icanhazip.com
}
internet_status() {
    internet=$(curl -sIL -m 3 "https://google.com" | grep "HTTP[^ ]* 200")
    if [ -n "${internet}" ]; then echo "CONNECTED";
    else echo "ERROR"; fi
}

show_slim_info() {
    echo "----[ System information ]----"
    echo "Hostname  : $(hostname)"
    echo "Users     : $(active_users)"
    echo "OS        : $(os_info) ($(platform))"
    echo "Uptime    : $(uptime)"
    echo "------------------------------"
    cpu_info
    echo "------------------------------"
    disk_info | sed 's/^/  : /g' | cat -n |  sed 's/^[ ]*/Disk-/g'
    echo "------------------------------"
    echo "Local IP  : $(local_ip | sort | xargs | sed 's/ /,/g')"
    echo "Internet  : $(internet_status)"
    echo "Public IP : $(public_ip)"
    echo "------------------------------"
    echo "Local time: $(date +"%Y-%m-%d %T %Z (%a)")"
    echo "UTC time  : $(date -u +"%Y-%m-%d %T %Z (%a)")"
}

execute_inxi() {
    if [ -n "$(which inxi)" ]; then
        if [ "${DEBUG}" == "true" ]; then echo "Execute: inxi ${1} ${2} ${3}"; fi
        $(which inxi) ${1} ${2} ${3}
    else
        echo "sudo apt-get install inxi"
        echo "or"
        echo "wget -O inxi smxi.org/inxi && chmod +x inxi && sudo mv inxi /usr/local/bin/"
    fi
}

arg1=${1:-"--simple"}
case "${arg1}" in
    help|--help|h|-h)
        sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
        exit 255;;
    simple|--simple|-S) show_slim_info ;;
    full|--full|-F) execute_inxi -mF ;;
    *) execute_inxi $@ ;;
esac

#!/usr/bin/env bash
VERSION=1.0.0
# ##############################################################################
## Use: {SCRIPT_NAME} <command>
## Commands:
##   list       - to see list of tools and aliases
##   update     - update myenv
##   check      - check new version on the remote repository
##                use argument '--daily' if you want to check once per day only
##   --version  - show current information about the tool
##
# ##############################################################################
if [[ -z "${BASH_VERSION:-}" ]]; then echo "Error: Bash is required." >&2; exit 1; fi


#-------------------------------------------------------------------------------
debug() { [[ "${DEBUG}" == "true" ]] && echo >&2 -e "${VERBOSE}$*${NOFORMAT}"; }
info() { echo >&2 -e "${INFO}$*${NOFORMAT}"; }
error() { echo >&2 -e "${ERROR}$*${NOFORMAT}"; }
prompt_yn() { read -r -p "${1} " opt; [[ "${opt:-"y"}" == "y" ]] || [[ "${opt}" == "Y" ]]; }
prompt_ny() { read -r -p "${1} " opt; [[ "${opt:-"n"}" != "y" ]] && [[ "${opt}" != "Y" ]]; }
usage() { sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${ENV_NAME}"'/g'; exit 1; }
cleanup() { cd "${OLD_PWD:-"${PWD}"}" >/dev/null || true; }
#-------------------------------------------------------------------------------

set -uo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT
OLD_PWD="$(pwd || true)"

# shellcheck disable=SC2312
script_dir="$(dirname "$(readlink "${0}" || pwd -P)")"
ENV_NAME="$(basename "${0}")"
DEF_ENV_HOME="$(readlink "${script_dir}" || exit 1)"
ENV_HOME=${ENV_HOME:-"${DEF_ENV_HOME}"}
REPO_BRANCH="${REPO_BRANCH:-"${BRANCH:-"master"}"}"
BIN_DIR="${HOME}/.local/bin"
DEBUG=${DEBUG:-"false"}
export PATH="${ENV_HOME}:${PATH}"
if [[ -z "${USER:-""}" ]]; then
    export USER="$(basename "${HOME}")"
fi

# Settings for collor output
if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' INFO='\033[0;32m' VERBOSE='\033[0;36m' ERROR='\033[0;31m';
else NOFORMAT='' INFO='' VERBOSE='' ERROR=''; fi

#-------------------------------------------------------------------------------
remove_symlinks_from_bin() {
  debug "Remove all ${ENV_NAME} symlinks from the ${BIN_DIR} directory"
  find "${BIN_DIR}" -maxdepth 1 -type l | while read -r link; do
    if readlink "${link}" | grep -q "${ENV_NAME}"; then
        rm -r "${link}"
    fi
  done
}

update_symlinks_to_bin() {
  info "Reinitialize ${BIN_DIR} directory..."
  mkdir -vp "${BIN_DIR}"
  remove_symlinks_from_bin
  cd "${ENV_HOME}" >/dev/null || exit 1
  info "Create symlinks for all files from ${ENV_HOME}/home/.local/bin -> ${BIN_DIR}..."
  find ./home/.local/bin -type f | while read -r f; do
    if [[ -x "${f}" ]]; then
      ln -vfs "${PWD}/${f}" "${BIN_DIR}"
    fi
  done
  info "Reinitialize ${BIN_DIR} directory - done"
}

update() {
    cd "${ENV_HOME}" || exit 1
    info "Updating ${ENV_NAME} v${VERSION} environment in ${ENV_HOME}..."
    debug "Reset to the ${REPO_BRANCH}:HEAD"
    git remote prune origin || exit 1
    git fetch --all || exit 1
    new_version=$(git tag | tail -n 1)
    info "The remote repository has a version == ${new_version}."
    if prompt_yn "Do you realy want to update (Y/n)?"; then
        if git status -s | grep -qv "^$"; then
            error "All changes will be lost in the directory ${ENV_HOME}."
            git status -s | head -n 10
            if prompt_ny "Are you sure you are ready to overwride all changes (y/N)?"; then
                info "Skip"
                exit 1
            fi
        fi
        git checkout "${REPO_BRANCH}" || exit 1
        git reset --hard "origin/${REPO_BRANCH}" || exit 1
        git log --pretty=format:"%h%x09%an%x09%ad%x09%s" | head -n 10
        info "Update ${ENV_NAME} environment local repository complete: ${ENV_HOME}"
        yes | "./${ENV_NAME}/bin/${ENV_NAME}" install-local --no-update
    else
        info "Skip"
        exit 1
    fi
}

version() {
    echo "${ENV_NAME} v${VERSION}: ENV_HOME=${ENV_HOME}"
}

check_new_version() {
    stat_file="/tmp/${ENV_NAME}-update.stat"
    today=$(date +"%Y-%m-%d")
    touch "${stat_file}"
    if [[ "${1:-}" == "--daily" ]] && [[ "$(cat "${stat_file}" || true)" == "${today}" ]]; then
        debug "Already checked today"
        return 1
    fi
    debug "Checking a new version of the ${ENV_NAME}..."
    echo -n "${today}" > "${stat_file}"
    cd "${ENV_HOME}" || exit 1
    git fetch --all >/dev/null || exit 1
    new_version="$(git tag | tail -n 1)"
    new_version="${new_version:-"0.0.1"}"
    if [[ "${new_version}" == "${VERSION}" ]]; then info "Current version ${VERSION} is up to date"; return 1; fi
    error "The ${ENV_NAME} has a new version ${new_version}. To update it use a command \"${ENV_NAME} update\"."
}

install_local() {
    no_update="${1:-""}"
    cd "${ENV_HOME}" >/dev/null || exit 1
    git fetch || exit 1
    git checkout "${REPO_BRANCH}" || exit 1
    version="$(git tag | tail -n 1)"
    version="${new_version:-"0.0.1"}"
    info "Script is installing '${ENV_NAME} v${version}' environment."
    info "The '${ENV_NAME}' environment directory is $(pwd || true)"
    info "Source directory is $(pwd || true)"
    if ! prompt_yn "Do you want to continue setup (Y/n)?"; then
        info "Skip";
        return
    fi
    setup_settings
    setup_core_settings
    update_symlinks_to_bin
    if [[ "${no_update}" != "--no-update" ]] && [[ "${no_update}" != "no-update" ]]; then
        update
    fi
    update_bash_profile
    info "Done ${ENV_NAME} local setup"
    info "Please restart your terminal session to have all settings apply."
}

setup_settings() {
    info "Start ${ENV_NAME} local setup"
    if [[ "${OSTYPE}" == 'darwin'* ]]; then
        setup_mac_specific_settings
    else
        # TODO: do we need other systems?
        setup_linux_specific_settings
    fi
    
    mkdir -p "${HOME}/.aws"
    mkdir -p "${HOME}/.local/bin"

    debug "Check ~/.bashrc_${USER} file"
    if [[ -f "${HOME}/.bashrc_${USER}" ]]; then
        info "File .bashrc_${USER} exists"
    else
        cp -v "${PWD}/${ENV_NAME}/.bashrc_user_example" "${HOME}/.bashrc_${USER}"
    fi
}

update_bash_profile() {
    # Remove old bashrc configuration file if it exists
    if [[ -f "${HOME}/.bashrc_myenv" ]]; then
        mv -v "${HOME}/.bashrc_myenv" "${HOME}/.bashrc_myenv.bak"
    fi

    info "Update ~/.bashrc if needed"
    touch "${HOME}/.bashrc" || exit 1
    if ! grep -q ".bashrc_${ENV_NAME}" "${HOME}/.bashrc" 2>/dev/null; then
        {
            echo ""
            echo "# --[ Load ${ENV_NAME} configuration:start ]------------------------"
            echo "export MYENVHOME=TODO"
            echo "if [ -r \"${ENV_HOME}/${ENV_NAME}/.bashrc_${ENV_NAME}\" ]; then"
            echo "    . \"${ENV_HOME}/${ENV_NAME}/.bashrc_${ENV_NAME}\";"
            echo "    echo \"Configuration '${ENV_HOME}/${ENV_NAME}/.bashrc_${ENV_NAME}' was loaded\""
            echo "else"
            echo "    echo \"WARNING: custom configuration '${ENV_HOME}/${ENV_NAME}/.bashrc_${ENV_NAME}' not found\""
            echo "fi"
            echo "# --[ Load ${ENV_NAME} configuration:end ]--------------------------"
            echo ""
        } >> "${HOME}/.bashrc"
    fi
    grep "${ENV_HOME}/.bashrc\|${ENV_NAME}" "${HOME}/.bashrc"
}

setup_mac_specific_settings() {
  info "Setup for MacOS"
  current_shell=$(dscl . -read ~/ UserShell | sed 's/UserShell: //' 2>/dev/null)
  if [[ "${current_shell}" != *'/bash' ]]; then
    info "You are using ${current_shell} as a default shell. We need to switch to bash"
    chsh -s /bin/bash
  fi
  info "Check a current user shell: ${USER} - $(dscl . -read ~/ UserShell || true)"

  info "Add custom brew repositories into the brew taps list"
  if brew tap | grep "custom/tap"; then
    info "You already have ENV_LOGO_DISABLED in your brew taps list. Skip."
  else
    brew tap ENV_LOGO_DISABLED git-repo-ssh-url
    brew tap | grep "cpe/tools";
  fi

  # We need to remove awssaml from the local/bin, because we will start using awssaml from the cpe repository: brew install awssaml
  rm -f "${HOME}/.local/bin/awssaml" >/dev/null
  
  # Remove old bash_profile if it is a symlink
  if stat "${HOME}/.bash_profile" | cut -d" " -f3 | grep -q "^l"; then
    mv -v "${HOME}/.bash_profile" "${HOME}/.bash_profile.bak"
  fi

  info "Update ~/.bash_profile if needed"
  touch "${HOME}/.bash_profile" || exit 1

  if ! grep -q ".bashrc" "${HOME}/.bash_profile" 2>/dev/null; then
    # shellcheck disable=SC2016
    echo -e '\n[ -r "${HOME}/.bashrc" ] && . "${HOME}/.bashrc"\n' >> "${HOME}/.bash_profile"
  fi
  grep ".bashrc" "${HOME}/.bash_profile"
}

setup_linux_specific_settings() {
  info "Setup for Linux"
}

setup_core_settings() {
    if [[ ! -f "${HOME}/.git_completion" ]]; then
        info "Add git completion in terminal: '${HOME}/.git_completion'"
        wget -O "${HOME}/.git_completion" "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
    fi
}

list() {
    echo "--[ Tools ]-------------"
    (
        find "${ENV_HOME}/${ENV_NAME}/bin/" -type f -exec basename "{}" \;
        find "${ENV_HOME}/${ENV_NAME}/lib/" -type f -exec basename "{}" \;
    ) | sort
    echo ""
    echo "--[ Aliases ]-----------"
    grep "^alias" "${ENV_HOME}/${ENV_NAME}/.bashrc_${ENV_NAME}" | sed 's/^alias //g' | sed "s/=/ = /g" | sort
}

#-------------------------------------------------------------------------------
case "${1:-"--version"}" in
    help|--help|-h) usage ;;
    version|--version) version ;;
    update) update ;;
    check) check_new_version "${2-}" ;;
    install-local|install-locally) shift; install_local "$@" ;;
    list|--list) list ;;
    *)
    cmd="${1}"
    
    pwd="$(readlink -f "${ENV_HOME}")"
    # pwd="$(python3 -c 'import os,sys; print(os.path.realpath(sys.argv[1] if len(sys.argv) > 1 else "."))' "${ENV_HOME}")"
    for subdir in echo ". bin lib ${ENV_NAME}/bin ${ENV_NAME}/lib"; do
        cmd="${pwd}/${subdir}/${1}"
        debug "Check: ${cmd}"
        if command -v "${cmd}" >/dev/null; then
            break
        fi
    done
    if command -v "${cmd}" >/dev/null; then
        shift; "${cmd}" "$@"
    else
        echo "Error: command '${1}' not found."; exit 1
    fi ;;
esac

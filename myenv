#!/usr/bin/env bash
VERSION=1.0.42
# ##############################################################################
## Use: {SCRIPT_NAME} <command>
## Commands:
##   list       - to see list of tools and aliases
##   update     - update {ENV_NAME}
##   check      - check new version on the remote repository
##                use argument '--daily' if you want to check once per day only
##   --version  - show current information about the tool
##
# ##############################################################################
if [[ -z "${BASH_VERSION:-}" ]]; then echo "Error: Bash is required." >&2; exit 1; fi

#-------------------------------------------------------------------------------
debug() { [[ "${DEBUG}" == "true" ]] && echo >&2 -e "${VERBOSE}$*${NOFORMAT}"; }
info() { echo >&2 -e "${INFO}$*${NOFORMAT}"; }
error() { echo >&2 -e "${ERROR}$*${NOFORMAT}"; }
prompt_yn() { read -r -p "${1} " opt; [[ "${opt:-"y"}" == "y" ]] || [[ "${opt}" == "Y" ]]; }
prompt_ny() { read -r -p "${1} " opt; [[ "${opt:-"n"}" != "y" ]] && [[ "${opt}" != "Y" ]]; }
cleanup() { cd "${OLD_PWD:-"${PWD}"}" >/dev/null || true; }
usage() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${ENV_NAME}"'/g' \
    | sed 's/{ENV_NAME}/'"${ENV_NAME}"'/g'
    exit 1
}
#-------------------------------------------------------------------------------

set -uo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT
OLD_PWD="$(pwd || true)"

# shellcheck disable=SC2312
script_dir="$(dirname "$(readlink -f "${0}" || pwd -P)")"
ENV_NAME="$(basename "${0}")"
ENV_NAME="${ENV_NAME:-"userenv"}"
ENV_VAR_NAME="$(echo "${ENV_NAME}" | tr "[:lower:]" "[:upper:]")"
ENV_VAR_NAME="${ENV_VAR_NAME:-"USERENV"}"
DEF_ENV_HOME="$(readlink -f "${script_dir}" || exit 1)"
ENV_HOME="${ENV_HOME:-"${DEF_ENV_HOME}"}"
ENV_LOGO="${ENV_LOGO:-"enabled"}"
REPO_BRANCH="${REPO_BRANCH:-"${BRANCH:-"master"}"}"
BIN_DIR="${HOME}/.local/bin"
DEBUG="${DEBUG:-"false"}"
WORKSPACE="${WORKSPACE:-"${HOME}/Documents/Workspace"}"
# TMPDIT=/tmp
PATH="${ENV_HOME}:${PATH}"
export PATH="${PATH}"
if [[ -z "${USER:-""}" ]]; then
    USER="$(basename "${HOME}")"
    export USER="${USER}"
fi

#-------------------------------------------------------------------------------
export OSTYPE="${OSTYPE:-"$(uname -s | tr "[:lower:]" "[:upper:]")"}"
case "${OSTYPE}" in
  linux*)
    if grep "Microsoft\|WSL" /proc/sys/kernel/osrelease > /dev/null; then export OSNAME=wsl;
    else export OSNAME=linux; fi
    ;;
  darwin*)  export OSNAME=macos ;;
  *)        export OSNAME=unknown ;;    # solaris* / bsd* / msys* / cygwin* / other
esac

# Settings for color output
if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' INFO='\033[0;32m' VERBOSE='\033[0;36m' ERROR='\033[0;31m';
else NOFORMAT='' INFO='' VERBOSE='' ERROR=''; fi

#-------------------------------------------------------------------------------
remove_symlinks_from_bin() {
  debug "Remove all ${ENV_NAME} symlinks from the ${BIN_DIR} directory"
  find "${BIN_DIR}" -maxdepth 1 -type l | while read -r link; do
    if readlink -f "${link}" | grep -q "${ENV_NAME}"; then
        rm -r "${link}"
    fi
  done
}

_make_symlinks_to_bin() {
  dir="${1:-"/tmp/not-exists"}"
  debug "Making symlink ${BIN_DIR}/* -> ${dir}/* ..."
  if [[ ! -d "${dir}" ]]; then
     debug "Directory ${dir} not exists. Skip."
     return 0
  fi
  find "${dir}" -type f -or -type l | while read -r f; do
    debug "Processing ${f} file..."
    if [[ -x "${f}" ]]; then
      name="$(basename "${f}")"
      _create_symlinks "${PWD}/${f}" "${BIN_DIR}/${name}"
      chmod +x "${BIN_DIR}/${name}"
    fi
  done
}

_create_symlinks() {
  src="${1}"
  target="${2}"
  if [ -f "${target}" ] && [ ! -L "${target}" ]; then
    mv -v "${target}" "${target}.$(date +"%Y%m%d-%H%M%S")"
  fi
  mkdir -p "$(dirname "${target}")"
  ln -vfs "${src}" "${target}"
}

update_symlinks_to_home() {
  info "Reinitialize ${BIN_DIR} directory..."
  mkdir -vp "${BIN_DIR}"
  remove_symlinks_from_bin
  cd "${ENV_HOME}" >/dev/null || exit 1
  info "Create symlinks for all files from ${ENV_HOME}/home/.local/bin -> ${BIN_DIR}..."
  _make_symlinks_to_bin "./home/.local/bin"
  _make_symlinks_to_bin "./home/.local/bin_${OSNAME}"
  info "Reinitialize ${BIN_DIR} directory - done"

  info "Create symlinks for all paths in the ${ENV_HOME}/home/ -> ${HOME}..."
  cd "${ENV_HOME}/home"
  find . -type f -o -type l | grep -v ".config/" | grep -v ".local/" | grep -v "\.gitconfig.local" | sed 's/^\.\///g' \
  | while read f; do
      _create_symlinks "${ENV_HOME}/home/${f}" "${HOME}/${f}"
  done
  # Create files if it is not exists (local specific)
  if [ ! -f "${HOME}/.gitconfig.local" ]; then
    cp -v ".gitconfig.local" "${HOME}/.gitconfig.local"
  fi
  cd - >/dev/null
  _create_symlinks "${ENV_HOME}/${ENV_NAME}" "${BIN_DIR}/${ENV_NAME}"
  chmod +x "${BIN_DIR}/${ENV_NAME}"
  info "Reinitialize ${HOME} directory - done"
}

update() {
    cd "${ENV_HOME}" || exit 1
    info "You are using ${ENV_NAME} v${VERSION} environment on ${OSNAME} system."
    info "Environemnt home directory is '${ENV_HOME}'"
    echo "Updating..."
    debug "Reset to the ${REPO_BRANCH}:HEAD"
    git remote prune origin || exit 1
    git tag -l | xargs git tag -d 2>/dev/null >/dev/null
    git fetch --tags --all || exit 1
    echo "Changes:"
    git diff --stat HEAD..origin/${REPO_BRANCH}
    echo "Getting latest tag..."
    printf " * [latest tag]      "; git tag -l --sort=-version:refname | head -n 1
    echo " * [local version]   ${VERSION}"
    new_version=$(git tag | sort --version-sort | tail -n 1)
    repo_url=$(git config --get remote.origin.url 2>/dev/null)
    info "The remote repository '${repo_url} (${REPO_BRANCH})' has a version == ${new_version}."
    if prompt_yn "Do you really want to update (Y/n)?"; then
        if git status -s | grep -qv "^$"; then
            error "All changes will be lost in the directory ${ENV_HOME}."
            git status -s | head -n 10
            if prompt_ny "Are you sure you are ready to overwrite all changes (y/N)?"; then
                info "Skip"
                exit 1
            fi
        fi
        git checkout "${REPO_BRANCH}" || exit 1
        git reset --hard "origin/${REPO_BRANCH}" || exit 1
        git log --pretty=format:"%h%x09%an%x09%ad%x09%s" | head -n 10
        echo ""
        info "Update ${ENV_NAME} environment local repository complete: ${ENV_HOME}"
        # yes | "./${ENV_NAME}/bin/${ENV_NAME}" install-local --no-update
        yes | "${ENV_HOME}/${ENV_NAME}" install-local --no-update
    else
        info "Skip"
        exit 1
    fi
}

version() {
    echo "${ENV_NAME} v${VERSION}: ENV_HOME=${ENV_HOME}"
}

check_new_version() {
    stat_file="${TMPDIR}/${ENV_NAME}-update.stat"
    today=$(date +"%Y-%m-%d")
    touch "${stat_file}"
    if [[ "${1:-""}" == "--daily" ]] && [[ "$(cat "${stat_file}" || true)" == "${today}" ]]; then
        debug "Already checked today"
        return 1
    fi
    debug "Checking a new version of the ${ENV_NAME}..."
    echo -n "${today}" > "${stat_file}"
    cd "${ENV_HOME}" || exit 1
    git fetch --all >/dev/null || exit 1
    new_version="$(git tag | tail -n 1)"
    new_version="${new_version:-"0.0.1"}"
    if [[ "${new_version}" == "${VERSION}" ]]; then info "Current version ${VERSION} is up to date"; return 1; fi
    error "The ${ENV_NAME} has a new version ${new_version}. To update it use a command \"${ENV_NAME} update\"."
}

install_local() {
    # no_update="${1:-""}"
    cd "${ENV_HOME}" >/dev/null || exit 1
    git fetch || exit 1
    git checkout "${REPO_BRANCH}" || exit 1
    # version="$(git tag | tail -n 1)"
    version="${VERSION}"
    info "Script is installing '${ENV_NAME} v${version}' environment."
    info "The '${ENV_NAME}' environment directory is $(pwd || true)"
    info "ENV_HOME=${ENV_HOME}"
    if ! prompt_yn "Do you want to continue setup (Y/n)?"; then
        info "Skip";
        return
    fi
    setup_settings
    setup_core_settings
    update_symlinks_to_home
    # if [[ "${no_update}" != "--no-update" ]] && [[ "${no_update}" != "no-update" ]]; then
    #     update
    # fi
    update_bash_profile
    info "Done. The '${ENV_NAME}' setup successfully."
    info "Please restart your terminal session to have all settings apply."
}

setup_settings() {
    info "Start ${ENV_NAME} local setup"
    mkdir -p "${HOME}/.aws"
    mkdir -p "${HOME}/.local/bin"

    if [[ "${OSTYPE}" == 'darwin'* ]]; then
        setup_mac_specific_settings
    else
        # TODO: do we need to support other systems?
        setup_linux_specific_settings
    fi

    debug "Check ~/.bashrc_${USER} file"
    if [[ -f "${HOME}/.bashrc_${USER}" ]]; then
        info "File .bashrc_${USER} exists"
    else
        cp -v "${PWD}/home/.config/${ENV_NAME}/bashrc_user.example" "${HOME}/.config/bashrc_${USER}"
    fi
}

update_bash_profile() {
    # Remove old bashrc configuration file if it exists
    if [[ -f "${HOME}/.bashrc_${ENV_NAME}" ]]; then
        mv -v "${HOME}/.bashrc_${ENV_NAME}" "${HOME}/.bashrc_${ENV_NAME}.bak"
    fi

    info "Update ~/.bashrc if needed"
    touch "${HOME}/.bashrc" || exit 1
    if ! grep -q "Load ${ENV_NAME} configuration" "${HOME}/.bashrc" 2>/dev/null; then
        {
            echo ""
            echo "# --[ Load ${ENV_NAME} configuration:start ]------------------------"
            echo "export PATH=\"${WORKSPACE}/bin:${HOME}/.local/bin:${PATH}\""
            echo "export ${ENV_VAR_NAME}NAME=\"${ENV_NAME}\""
            echo "export ${ENV_VAR_NAME}HOME=\"${ENV_HOME}\""
            echo "export ${ENV_VAR_NAME}LOGO=\"${ENV_LOGO}\""
            echo "export WORKSPACE=\"${WORKSPACE}\""
            echo "if [ -r \"${ENV_HOME}/home/.config/${ENV_NAME}/bashrc\" ]; then"
            echo "    . \"${ENV_HOME}/home/.config/${ENV_NAME}/bashrc\";"
            echo "    echo \"Configuration '${ENV_HOME}/home/.config/${ENV_NAME}/bashrc' was loaded\""
            echo "else"
            echo "    echo \"WARNING: custom configuration '${ENV_HOME}/home/.config/${ENV_NAME}/bashrc' not found\""
            echo "fi"
            echo "# --[ Load ${ENV_NAME} configuration:end ]--------------------------"
            echo ""
        } >> "${HOME}/.bashrc"
    fi
    grep "${ENV_HOME}/.bashrc\|${ENV_NAME}" "${HOME}/.bashrc"
}

setup_mac_specific_settings() {
  info "Setup for MacOS"
  current_shell=$(dscl . -read ~/ UserShell | sed 's/UserShell: //' 2>/dev/null)
  if [[ "${current_shell}" != *'/bash' ]]; then
    info "You are using ${current_shell} as a default shell. We need to switch to bash"
    read -rp "Do you want to continue (Y/n)? " opt
    if [ "${opt:-"y"}" != "y" ] && [ "${opt}" != "Y" ]; then echo "Skip"; exit 1; fi
    chsh -s /bin/bash
  fi
  info "Check a current user shell: ${USER} - $(dscl . -read ~/ UserShell || true)"

  # info "Add custom brew repositories into the brew taps list"
  # if brew tap | grep "custom/tap"; then
  #  info "You already have custom/tap in your brew taps list. Skip."
  # else
  #  brew tap | grep "custom/tap";
  # fi
  
  info "Update ~/.bash_profile if needed"
  touch "${HOME}/.bash_profile" || exit 1

  if ! grep -q ".bashrc" "${HOME}/.bash_profile" 2>/dev/null; then
    # shellcheck disable=SC2016
    echo -e '\n[ -r "${HOME}/.bashrc" ] && . "${HOME}/.bashrc"\n' >> "${HOME}/.bash_profile"
  fi
  grep ".bashrc" "${HOME}/.bash_profile"

  # Hide ${HOME}/bin directory from Finder by default 
  if [ -d "${HOME}/bin" ]; then chflags hidden "${HOME}/bin"; fi
}

setup_linux_specific_settings() {
  info "Setup for Linux"
  echo "Update default editor"
  update-alternatives --set editor "$(which nvim || which vim || which vim.tiny)" \
  && echo "Update default editor - success" || echo "Update default editor - failed"
}

setup_core_settings() {
    if [[ ! -f "${HOME}/.git_completion" ]]; then
        info "Add git completion in terminal: '${HOME}/.git_completion'"
        wget -O "${HOME}/.git_completion" "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
    fi
}

list() {
    echo "--[ Aliases ]-----------"
    (
        grep "^alias" "${ENV_HOME}/home/.config/${ENV_NAME}/bashrc" | sed 's/^alias //g' | sed "s/=/ = /g" | sort
    ) | sort | sed 's/^/* /g'
    echo ""
    echo "--[ Tools ]-------------"
    (
        find "${ENV_HOME}/home/.local/bin/" -type f -exec basename "{}" \;
    ) | sort | sed 's/^/* /g'
    echo ""
    echo "--[ Tools: extra ]------"
    (
        find "${ENV_HOME}/tools/" -type f -exec basename "{}" \;
    ) | sort | sed 's/^/* /g'
    
    
}

execute_command() {
    cmd="${1}"
    pwd="$(readlink -f "${ENV_HOME}")"
    # pwd="$(python3 -c 'import os,sys; print(os.path.realpath(sys.argv[1] if len(sys.argv) > 1 else "."))' "${ENV_HOME}")"
    for subdir in $(echo ". bin lib home/.local/bin tools"); do
        cmd="${pwd}/${subdir}/${1}"
        debug "Check: ${cmd}"
        if command -v "${cmd}" >/dev/null; then
            break
        fi
    done
    if command -v "${cmd}" >/dev/null; then
        shift; "${cmd}" "$@"
    else
        echo "Error: command '${1}' not found."; exit 1
    fi
}

#-------------------------------------------------------------------------------
case "${1:-"--version"}" in
    help|--help|-h) usage ;;
    version|--version) version ;;
    update) update ;;
    check) check_new_version "${2-}" ;;
    install|install-local|install-locally) shift; install_local "$@" ;;
    list|--list) shift; list "$@" ;;
    *) execute_command "$@" ;;
esac

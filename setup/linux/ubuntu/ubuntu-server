#!/bin/sh
# #############################################################################
## Initial setup for a clean Ubuntu Server 22.04
#
## Usage: {SCRIPT_NAME} list|install-all|<step-name>
# #############################################################################
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
    exit 255
}
prompt_ny_slim() {
    read -r -p "${1} (y/N)? " opt
    if [ "${opt:-"n"}" != "y" ] && [ "${opt}" != "Y" ]; then return 1; fi
    return 0
}
prompt_ny() {
    echo ""
    if prompt_ny_slim "${1}"; then return 0; else return 1; fi
}
download_app() {
    url="${1}"
    app="$(basename "${url}")"
    if which curl >/dev/null; then curl -o "${app}" "${url}";
    else wget -O "${app}" "${url}"; fi
    if [ -f "${app}" ]; then
        chmod +x "${app}";
        if [ -d /usr/local/bin ]; then
            sudo mv -v "${app}" /usr/local/bin/
        else
            sudo mv -v "${app}" /usr/bin/
        fi
    fi
}
# -----------------------------------------------------------------------------
setup_00_apt_update() {
    sudo apt update
}
# -----------------------------------------------------------------------------
setup_00_install_ssh_server() {
    if ! which sshd >/dev/null; then
        echo "Install openssh-server..."
        sudo apt install -y openssh-server
        # Settings:
        # sudo vim /etc/ssh/sshd_config
        # Add:
        #    PermitRootLogin no
        # Add:
        #    AllowUsers master dev bob
        # sudo systemctl restart sshd
    else
        echo "Looks like ssh server already setup"
    fi
}
# -----------------------------------------------------------------------------
setup_01_remove_snapd_package() {
    if which snapd >/dev/null; then
        for pkg in $(snap list 2>/dev/null | grep -iv "^Name" | grep -iv "^snapd" | cut -d" " -f1); do
            sudo snap remove --purge "${pkg}"
        done
        sudo apt -y purge snapd 2>/dev/null
        sudo apt -y autoremove
    fi
}
# -----------------------------------------------------------------------------
setup_02_install_core_tool_01() {
    if prompt_ny "Install core tools #1 (neovim, screen, mc, htop, tree, lynx, git)"; then
        sudo apt -y purge vim vim-tiny vim-common
        sudo apt -y install curl wget mc htop screen neovim tree net-tools git
        sudo cp -v /etc/bash.bashrc /etc/bash.bashrc.$(date +%s)
        (echo ''; echo 'export EDITOR=vi'; echo '') | sudo tee -a /etc/bash.bashrc
    fi
}
setup_02_install_core_tool_02() {
    if prompt_ny "Install core tools #2 (inxi, duf)"; then
        sudo apt -y install inxi
        rm -f /tmp/duf.deb
        wget -O /tmp/duf.deb https://github.com/muesli/duf/releases/download/v0.8.1/duf_0.8.1_linux_amd64.deb
        sudo apt install /tmp/duf.deb
    fi
}
# -----------------------------------------------------------------------------
setup_02_setup_python3() {
    if prompt_ny "Setup python3"; then
        if ! which python3 >/dev/null; then sudo apt -y install python3; fi
        if ! which pip3 >/dev/null; then sudo apt -y install python3-pip; fi
        [ -z "$(which python)" ] && sudo ln -fs $(which python3) /usr/bin/python
        [ -z "$(which pip)" ] && sudo ln -fs $(which pip3) /usr/bin/pip
        pip3 install requests
        pip3 install python-dotenv
    fi
}
# -----------------------------------------------------------------------------
setup_02_install_xwindow_tools() {
    if which startx >/dev/null; then
        sudo apt -y purge thunderbird
        if prompt_ny "Install core X-Windows tools: firefox, gedit"; then
            which startxfce4 >/dev/null && sudo apt -y install mugshot
            sudo apt -y install gedit firefox
        fi
    else
        echo "You don't have XWindow. Skip."
        return 0
    fi
    if prompt_ny "Install XRDP"; then
        wget https://raw.githubusercontent.com/revgen/myenv/master/setup/linux/ubuntu/install-xrdp-with-xfce.sh
        sudo sh install-xrdp-with-xfce.sh
    fi
}
# -----------------------------------------------------------------------------
setup_03_install_my_tools() {
    if prompt_ny "Install my core tools (session, telebot, sysinfo)"; then
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/home/.local/bin/session"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/home/.local/bin/sysinfo"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/home/.local/bin/localip"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/home/.local/bin/externalip"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/tools/telebot"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/tools/ddclient"
        download_app "https://raw.githubusercontent.com/revgen/myenv/master/tools/gitlab"
    fi
}
# -----------------------------------------------------------------------------
setup_05_setup_rc_local() {
    if prompt_ny "Enable rc.local"; then
        if [ -f /etc/systemd/system/rc-local.service ] && [ -f /etc/rc.local ]; then
            echo "Looks like rc.local already setup. Skip"
        else
            if [ ! -f /etc/rc.local ]; then
                ( echo '#!/bin/bash'; echo 'exit 0') | sudo tee /etc/rc.local
            fi
            if [ ! -f /etc/systemd/system/rc-local.service ]; then
                (
                    echo "[Unit]"
                    echo "  Description=/etc/rc.local Compatibility"
                    echo "  ConditionPathExists=/etc/rc.local"
                    echo ""
                    echo "[Service]"
                    echo "  Type=forking"
                    echo "  ExecStart=/etc/rc.local start"
                    echo "  TimeoutSec=0"
                    echo "  StandardOutput=tty"
                    echo "  RemainAfterExit=yes"
                    echo "  SysVStartPriority=99"
                    echo ""
                    echo "[Install]"
                    echo "  WantedBy=multi-user.target"
                ) | sudo tee /etc/systemd/system/rc-local.service
            fi
            sudo chown root:root /etc/systemd/system/rc-local.service
            sudo systemctl enable rc-local
            sudo systemctl start rc-local
            sudo systemctl status rc-local
        fi
        
    fi
}
# -----------------------------------------------------------------------------
setup_21_install_docker() {
    if prompt_ny "Install docker"; then
        sudo apt install -y docker.io docker-compose
        if prompt_ny_slim "Add user to the docker group"; then
            read -p "Input username (default: ${USER}): " opt
            sudo usermod -a -G docker "${opt:-"${USER}"}"
            id "${USER}"
        fi
    fi
}
# -----------------------------------------------------------------------------
setup_99_enable_firewall_open_ssh_http() {
    if prompt_ny "Setup firewall: ports 22,80,443 were openned"; then
        if ! which ufw >/dev/null; then sudo apt install -y ufw; fi
        sudo ufw allow ssh
        sudo ufw allow http
        sudo ufw allow https
        # -- rdp --
        # sudo ufw allow 3389
        # -- samba --
        # sudo ufw allow 137
        # sudo ufw allow 138
        # sudo ufw allow 139
        # sudo ufw allow 445
        # -- plex --
        # sudo ufw allow 32400
        # -- netdata --
        # sudo ufw allow 19999
        # -- dev ports --
        # sudo ufw allow 8000:8999/tcp
        sudo ufw enable
        sudo ufw status
    fi
}
# -----------------------------------------------------------------------------
setup_20_add_user() {
    while true; do
        read -r -p "Input new user name (Enter to exit): " opt
        new_user="${opt}"
        [ -z "${new_user}" ] && return 0
        if prompt_ny_slim "Do you want to add '${new_user}' user to the system"; then
            sudo adduser --home "/home/${new_user}" --shell /bin/bash --quiet --disabled-password \
                --gecos "${new_user}" "${new_user}" || return 1
            new_pass="$(head -c 32 /dev/random  | base64 | head -c 32)"
            echo "${new_user}:${new_pass}" | chpasswd
            if which startxfce4 >/dev/null; then    # if xfce, add User Letter to the Avatar
                user_letter="$(echo "${user_name}" | tr [:lower:] [:upper:] | head -c 1)"
                wget -O /tmp/.face "https://placehold.co/96x96/283C50/FFFFFF/png?text=${user_letter}"
                sudo mv -v /tmp/.face "/home/${new_user}/.face" || return 1
                sudo chown -v "${new_user}:${new_user}" "/home/${new_user}/.face" || return 1
                sudo chmod -v 0640 "/home/${new_user}/.face" || return 1
            fi
            echo "User '${new_user}' added"
        fi
    done
}
# -----------------------------------------------------------------------------
run_step() {
    echo "============================================================"
    step="$(grep "${1}" "${0}" | cut -d"(" -f1)"
    if [ -z "${step}" ]; then echo "Error: Step '${1}' not found"; return 1; fi
    echo "Run ${step}"
    "${step}"
}
run_all_steps() {
    for step in $(grep "^setup_" "${0}" | cut -d"(" -f1 | sort); do
        run_step "${step}" && echo "Success"
    done
    echo "============================================================"
    echo "Done"
}

# -----------------------------------------------------------------------------
echo "The script is running on the '$(grep "PRETTY_NAME" /etc/os-release | cut -d"=" -f2 | sed 's/\"//g')' system"
echo ""
cmd="${1:-"--help"}"

case "${cmd}" in
    all|install-all) run_all_steps ;;
    list) echo "Steps:"; grep "^setup_" "${0}" | cut -d"(" -f1 | sed 's/^/* /g'| sort ;;
    install|step) run_step "${2}" ;;
    help|--help|h|-h) show_help; exit 1 ;;
    *) run_step "${1}" ;;
esac
# -----------------------------------------------------------------------------

#!/usr/bin/env bash
#=============================================================================
## Helper script to control Calibre-Web docker container.
##
## Usage: {SCRIPT_NAME} <start|stop|create|remove|logs|status|shell>
#
#  Author     : Evgen Rusakov
#  Version    : 1.0.0
#  Url        : https://github.com/revgen/docker-<name>
#
## Environment variables:
##   CALIBRE_HOME        - directory with your Calibre DB
##                         (default: /mnt/data/var/calibre)
##   CALIBRE_WEB_CONFIG  - directory for Calibre-Web configuration
##                         (default: {CALIBRE_HOME}/_calibre_web/config)
##   PORT                - port wich you can use to connect to the Web UI (default: 9083)
#
#=============================================================================
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"$(basename "${0}")"'/g'
    exit 255
}

#-----------------------------------------------------------------------------
# PARAMETERS
IMAGE=technosoft2000/calibre-web
NAME=booklib
# Using your current user default group ID inside the docker container
PGID=${GID:-"$(id -G | cut -d" " -f1)"}
# Using your current user ID inside the docker container
PUID=${UID:-${UID}}
# Http port to the Web UI
PORT=${PORT:-"9083"}
TZ=${TZ:-"$(ls -l /etc/localtime | awk -F"zoneinfo/" "{print \$2}" 2>/dev/null || echo UTC)"}
# Sample directory with will be mounted to the volume inside the container
CALIBRE_HOME=${CALIBRE_HOME:-"/mnt/data/var/calibre"}
CALIBRE_WEB_HOME=${CALIBRE_WEB_HOME:-${CALIBRE_HOME}/_calibre_web/config}

#-----------------------------------------------------------------------------
create_directories() {
    mkdir -p "${CALIBRE_HOME}" 2>/dev/null
    mkdir -p "${CALIBRE_WEB_HOME}" 2>/dev/null
    chown -R ${PUID}:${PGID} "${CALIBRE_HOME}" "${CALIBRE_WEB_HOME}"
    chmod 0775 "${CALIBRE_HOME}" "${CALIBRE_WEB_HOME}"
}

create_container() {
    create_directories
    OLDPWD=${PWD}
    cd $(dirname "${0}")
    echo "Start ${NAME} container (port: ${PORT}, home: ${CALIBRE_HOME})."
    docker create --name=${NAME} --restart=always \
        -v "${CALIBRE_HOME}":/books \
        -v "${CALIBRE_WEB_HOME}":/calibre-web/config \
        -e USE_CONFIG_DIR=true \
        -e SET_CONTAINER_TIMEZONE=true \
        -e CONTAINER_TIMEZONE=${TZ} \
        -e PGID=${PGID} -e PUID=${PUID} \
        -p ${PORT}:8083 \
        ${IMAGE} && echo "Done"
    cd ${OLDPWD}
}

#-----------------------------------------------------------------------------
remove_container() {
    stop_container 2>/dev/null
    echo "Removing '${NAME}' container..."
    docker rm "${NAME}" 2>/dev/null
    echo "Done"
}

start_container() {
    echo "Starting '${NAME}' container..."
    docker start "${NAME}" && echo "Started '${NAME} - successfully"
}

stop_container() {
    echo "Stopping '${NAME}' container ..."
    docker stop "${NAME}" && echo "Stopped '${NAME}' - successfully"
}

container_logs() {
    docker logs "${NAME}" $@
}

container_shell() {
    docker exec -it "${NAME}" ${1:-"/bin/sh"}
}


container_status() {
    img=$(docker images "${IMAGE}" --format "{{.Repository}}:{{.Tag}}")
    if [ -n "${img}" ]; then
        echo "    Image: ${img}"
    else
        echo "    Image: Error - Image '${NAME}' not found"
    fi
    id=$(docker ps --filter name=${NAME} --format "{{.ID}}")
    echo "Container: ${NAME}"
    if [ -z "${id}" ]; then
        echo "*  Status: stopped or not exists"   
        return 1
    fi
    ports=$(docker ps --filter name="${NAME}" --format "{{.Ports}}")
    status=$(docker ps --filter name="${NAME}" --format "{{.Status}}")
    mounts=$(docker inspect --format="{{range .Mounts }}{{.Source}} -> {{.Destination}},{{end}}" "${NAME}" | tr -s ',' '; ')
    started=$(docker inspect --format='{{.State.StartedAt}}' "${NAME}")
    echo "*  Status: ${status}"
    echo "* Started: ${started}"
    echo "*      ID: ${id}"
    echo "*   Ports: ${ports}"
    echo "*  Mounts: ${mounts}"
    return 0
}
#-----------------------------------------------------------------------------
cmd=${1:-"help"}
shift
case "${cmd}" in
    create|C)       create_container $@ ;;
    delete|remove)  remove_container $@ ;;
    start|s)        start_container  $@ ;;
    stop|S)         stop_container   $@ ;;
    shell|sh)       container_shell  $@ ;;
    log|logs|l)     container_logs   $@ ;;
    status|st|info) container_status $@ ;;
    help|h|H)       show_help ;;
    *) echo "Error: Unknow command '${cmd}'."; show_help ;;
esac

#!/bin/bash
#=============================================================================

#-----------------------------------------------------------------------------
start_container() {
    create_directories
    echo "Starting '${NAME}' container..."
    docker start "${NAME}" && echo "Started '${NAME} - successfully"
}

#-----------------------------------------------------------------------------
stop_container() {
    echo "Stopping '${NAME}' container ..."
    docker stop "${NAME}" && echo "Stopped '${NAME}' - successfully"
}

#-----------------------------------------------------------------------------
remove_container() {
    stop
    echo "Removing '${NAME}' container..."
    docker rm "${NAME}" 2>/dev/null
    echo "Done"
}

#-----------------------------------------------------------------------------
# Show main information about a contaier
status() {
    img=$(docker images "${IMAGE}" --format "{{.Repository}}:{{.Tag}}")
    if [ -n "${img}" ]; then echo "    Image: ${img}";
    else echo "    Image: Error - Image '${NAME}' not found"; fi
    id=$(docker ps --filter name=${NAME} --format "{{.ID}}")
    echo "Container: ${NAME}"
    if [ -n "${id}" ]; then
        ports=$(docker ps --filter name="${NAME}" --format "{{.Ports}}")
        status=$(docker ps --filter name="${NAME}" --format "{{.Status}}")
        mounts=$(docker inspect --format="{{range .Mounts }}{{.Source}} -> {{.Destination}},{{end}}" "${NAME}" | tr -s ',' '; ')
        started=$(docker inspect --format='{{.State.StartedAt}}' "${NAME}")
        echo "*  Status: ${status}"
        echo "* Started: ${started}"
        echo "*      ID: ${id}"
        echo "*   Ports: ${ports}"
        echo "*  Mounts: ${mounts}"
        return 0
    else
        echo "*  Status: stopped or not exists"   
        return 1
    fi    
}

#-----------------------------------------------------------------------------
# Parse command line and handle a command
case "${1:-"help"}" in
    create|C)       shift; create $@ ;;
    delete|remove)  shift; remove $@ ;;
    start|s)        shift; start $@ ;;
    stop|S)         shift; stop $@ ;;
    shell|sh)       shift; docker exec -it "${NAME}" ${1:-"/bin/sh"} ;;
    log|logs|l)     shift; docker logs "${NAME}" $@ ;;
    status|st)      shift; status $@ ;;
    info|I)         shift; status $@ ;;
    help|h|H)       show_help ;;
    *) echo "Error: Unknow command '${1}'."; show_help ;;
esac


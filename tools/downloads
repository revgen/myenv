#!/usr/bin/env bash
# ############################################################################
## Work with download directory from cli
## Usage: {SCRIPT_NAME} <command>
## Commands:
##  clean   - move files older than 14 days into the Downloads/.archive, remove all files older than 60 days
##  open    - open Download directory
##
## Required:
##   trash - macos-trash tool https://github.com/sindresorhus/macos-trash (brew install macos-trash)
# ############################################################################
PRUNE_DAYS="${DOWNLOADS_PRUNE_DAYS:-"14"}"
TRASH_DAYS="${DOWNLOADS_TRASH_DAYS:-"62"}"
DOWNLOADS_LOCATION="${HOME}/Downloads"
ARCHIVE_LOCATION="${DOWNLOADS_LOCATION}/.archive"
STAT_FILE="$(mktemp)"

trap _exit EXIT

_exit() {
    rm -rf "${STAT_FILE}"
}

notificatio() {
    title="Downloads Cleanup"
    msg="${1}"
    osascript -e 'display notification "'"${msg}"'" with title "'"${title}"'"'
    echo "${title}"
    echo "${msg}"
}

prune_directory() {
    mkdir -p "${ARCHIVE_LOCATION}"
    target="${ARCHIVE_LOCATION}/$(date +"%Y-%m-%d")"
    mkdir -p "${target}"
    echo "Prune old files in the ${DOWNLOADS_LOCATION} directory (older than ${PRUNE_DAYS} days)..."
    count=0
    find "${DOWNLOADS_LOCATION}" -mindepth 1 -maxdepth 1 -type f -mtime +${PRUNE_DAYS} \
    | while read -r f; do
        name=$(basename "${f}")
        # mv -v "${f}" "${target}/${name}"
        count="$((count + 1))"
    done
    if [ "${count}" == "0" ]; then
        echo "Done. No files to archive"
    else
        notificatio "Archived ${count} files into the ${ARCHIVE_LOCATION}"
    fi
    
}

trash_old_files() {
    if ! which trash >/dev/null; then echo "Tool 'trash' not found. Install macos-trash first"; return 1; fi
    echo "Trash old files in the ${DOWNLOADS_LOCATION} directory (older than ${TRASH_DAYS} days)..."
    echo "Directory at the root of the ./Downloads with '_' will not be processed."
    count=0
    find "${DOWNLOADS_LOCATION}" -type f -mtime +${TRASH_DAYS} \
    | grep -v "^./_" | while read -r f; do
        echo "Move to trash: ${f}"
        # trash "${f}"
        count=$((count + 1))
        echo "${count}" > "${STAT_FILE}"
    done
    count="$(head -n 1 "${STAT_FILE}")"
    if [ "${count}" == "0" ]; then
        echo "Done. No files to trash"
    else
        notificatio "Moveed ${count} files to the trash"
    fi
}

cleanup_downloads() {
    prune_directory && trash_old_files
    tree -L 1 -dirsfirst ~/Downloads/
}

cmd="${1:-open}"
case "${cmd}" in
    help|--help|-h) sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${SCRIPT_NAME}"'/g'; exit 1;;
    cleanup|clean|prune) cleanup_downloads ;;
    open) open "${DOWNLOADS_LOCATION}" ;;
    *) echo "Error: unknown command '${cmd}'"; exit 1;;
esac

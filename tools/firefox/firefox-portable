#!/bin/sh
#=============================================================================
## Script to launch Firefox in "sandbox"/private mode
##
## Usage: {SCRIPT_NAME} [COMMAND]
##
## Command:
##  start           - create a sandbox and start Firefox from it (default)
##  close           - close executed firefox instance and remove all sandbox files
##  cleanup         - clean sandbox and all caches
##  help            - show this help screen
##
## Predefined addons list:
##  * AdblockPlus
##  * Video DownloadHelper
#=============================================================================
CACHE=${HOME}/.cache/firefox-sandbox
FIREFOX_APP=${HOME}/.local/var/tmp/Firefox.app
FIREFOX_HOME="$HOME/Library/Application Support/Firefox"

show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
    exit 255
}
info()  { echo "[INFO ] $@"; }
debug() { [ "${DEBUG}" == "true" ] && echo "[DEBUG] $@"; }

check_url_exists() { curl -sLI "${1}" | grep ^HTTP | tail -n 1 | grep -q " 200 OK"; }

get_profile_path() {
    [ -d "${FIREFOX_HOME}/Profiles" ] && FIREFOX_HOME=${FIREFOX_HOME}/Profiles
    find  "${FIREFOX_HOME}" -name "*.default" | head -n 1
}

_close_app() {
    # killall firefox 2>/dev/null
    killall firefox-bin 2>/dev/null
    killall firefox-orig 2>/dev/null
}
_delete_app() {
    info "Removing ${FIREFOX_APP} directory..."
    rm -rf "${FIREFOX_APP}" && info "  - Success"
    info "Removing ${FIREFOX_HOME} directory..."
    rm -rf "${FIREFOX_HOME}" && info "  - Success"
    info "Removing ${HOME}/Library/Caches/Firefox directory..."
    if [ -d "${HOME}/Library/Caches/Firefox" ]; then
        rm -rfP "${HOME}/Library/Caches/Firefox" && info "  - Success"
    else
        info "  - Success"
    fi
    
}
close_and_delete_app() {
    _close_app
    _delete_app
}
cleanup_sandbox() {
    close_and_delete_app
    info "Removing ${CACHE} directory..."
    rm -rf "${CACHE}" && info "  - Success"
}

start_sandbox() {
    close_and_delete_app >/dev/null

    mkdir -p "${CACHE}" 2>/dev/null
    mkdir -p "${FIREFOX_APP}" 2>/dev/null
    mkdir -p "${FIREFOX_HOME}" 2>/dev/null
    
    download_firefox
    create_private_launcher
    # Lunch firefox first time to create a profile
    /usr/bin/open -a ${FIREFOX_APP}
    sleep 2
    _close_app
    pref=$(get_profile_path)
    create_userjs "${pref}/user.js" && info "Update ${pref} - complete"
    
    install_addons
    info "Firefox sandbox installed ans ready to use."
    info "* Firefox.app  : ${FIREFOX_APP}"
    info "* User profile : ${pref}"
    info "* Package cache: ${CACHE}"
    /usr/bin/open --wait-apps -a ${FIREFOX_APP}
    close_and_delete_app
}

download_firefox() {
    cache_app=${CACHE}/Firefox.app
    debug "Check Firefox.app in a cache"
    dwgfile="${CACHE}/firefox.dmg"
    if [ -d "${cache_app}" ]; then
        info "Firefox.app cache exists: ${cache_app}"
    else
        debug "Download and install Firefox.app"
        url="https://download.mozilla.org/?product=firefox-latest-ssl&os=osx&lang=en-US"
        if [ ! -f "${dwgfile}" ]; then
            info "Download '${url}' -> '${dwgfile}'..."    
            curl -L -o "${dwgfile}" "${url}"
        else
            echo "Found firefox.dwg in the cache"
        fi
        [ -f "${dwgfile}" ] && \
        info "Mount downloaded drive..." && \
        hdiutil attach "${dwgfile}" && \
        info "Create cache from the DMG file" && \
        cp -R /Volumes/Firefox/Firefox.app "${cache_app}" && \
        info "Installed - success. Unmound instalation drive" && \
        (hdiutil eject -force /Volumes/Firefox 2>/dev/null || true)
    fi
    if [ $? -eq 0 ]; then
        echo "Copy ${cache_app} -> ${FIREFOX_APP}..."
        cp -R ${cache_app} "$(dirname "${FIREFOX_APP}")" && \
        info "Install firefox to the system" && \
        cp -R /Volumes/Firefox/Firefox.app "$(dirname "${FIREFOX_APP}")" && \
        ls ${FIREFOX_APP} && \
        echo "Firefox app installed: ${FIREFOX_APP}"
    fi
}

create_private_launcher() {
    mkdir -p "${CACHE}" 2>/dev/null
    mkdir -p "${FIREFOX_APP}/Contents/MacOS/" 2>/dev/null
    info "Rename origin firefox executable file"
    mv -v "${FIREFOX_APP}/Contents/MacOS/firefox" "${FIREFOX_APP}/Contents/MacOS/firefox-orig" || exit 1
    info "Create launcher script for private firefox"
    echo '#!/bin/sh' > ${FIREFOX_APP}/Contents/MacOS/firefox
    echo "\"\$(dirname \"\${0}\")/firefox-orig\" -private-window \$@" >> ${FIREFOX_APP}/Contents/MacOS/firefox
    chmod +x "${FIREFOX_APP}/Contents/MacOS/firefox"
    info "Done"
}

create_userjs() {
#cp -v "$(dirname "${0}")/user.js" "${pref}/user.js" 
echo -e '// Example: https://github.com/pyllyukko/user.js/blob/master/user.js

// PREF: Disable URL bar autocomplete and history/bookmarks suggestions dropdown
// http://kb.mozillazine.org/Disabling_autocomplete_-_Firefox#Firefox_3.5
user_pref("browser.urlbar.autocomplete.enabled", false);
// PREF: Do not check if Firefox is the default browser
user_pref("browser.shell.checkDefaultBrowser", false);
user_pref("browser.shell.cdidSkipDefaultBrowserCheckOnFirstRu", true);
// PREF: Disable Location-Aware Browsing (geolocation)
user_pref("geo.enabled", false);
// PREF: Disable face detection
user_pref("camera.control.face_detection.enabled", false);
// PREF: Disable Mozilla telemetry/experiments
user_pref("toolkit.telemetry.enabled", false);
user_pref("toolkit.telemetry.unified", false);
user_pref("toolkit.telemetry.archive.enabled", false);
user_pref("experiments.supported", false);
user_pref("experiments.enabled", false);
user_pref("experiments.manifest.uri", "");
// PREF: Disable sending Firefox crash reports to Mozilla servers
user_pref("breakpad.reportURL", "");
user_pref("browser.tabs.crashReporting.sendReport", false);
user_pref("browser.crashReports.unsubmittedCheck.enabled", false);
// PREF: Disable the built-in PDF viewer
user_pref("pdfjs.disabled", true);
// PREF: Disable Firefox Hello metrics collection
user_pref("loop.logDomains", false);
// PREF: Disable search suggestions in the search bar
user_pref("browser.search.suggest.enabled", false);
user_pref("browser.urlbar.suggest.searches", false);
user_pref("browser.urlbar.suggest.history", false);
/ PREF: Never check updates for search engines
user_pref("browser.search.update", false);
/ PREF: turn off application updates
user_pref("app.update.auto", false);
user_pref("app.update.enabled", false);
user_pref("app.update.silent", false);
' > "${1}" && info "Create ${1} file - success"
}

install_addons() {
    # AdblockPlus - addon-1865-latest.xpi
    install_addon "https://addons.mozilla.org/firefox/downloads/latest/1865/"
    # JSON Lite - json_lite-18.2.0-an+fx.xpi
    install_addon "https://addons.mozilla.org/firefox/downloads/file/854158/"
    # Video DownloadHelper - video_downloadhelper-7.0.0-an+fx.xpi
    install_addon "https://addons.mozilla.org/firefox/downloads/file/772055/"
    # "FVD" - flash_video_downloader_youtube_hd_download_4k-16.1.1-an+fx.xpi
    install_addon "https://addons.mozilla.org/firefox/downloads/file/1047845/"
    #install_addon "Tab Reloader" "https://addons.mozilla.org/firefox/downloads/file/812770/tab_reloader_page_auto_refresh-0.2.5-an+fx.xpi"
}


# Installs .xpi given by relative path
# to the extensions path given
# https://askubuntu.com/questions/73474/how-to-install-firefox-addon-from-command-line-in-scripts
install_addon () {
    # TODO: get addons name from the archive
    url=${1}
    hash=$(echo "${url}" | md5sum | cut -d" " -f1)
    info "Installation addon - started from ${url}..."
    xpi=${CACHE}/firefox-addon-${hash}.xpi
    if [ -f "${xpi}" ]; then
        echo "File exists in the cache. Skip download."
    else
        debug "  Download '${url}' -> '${xpi}'"
        if ! check_url_exists "${url}"; then
            info "  Download - ERROR: not exists ${url}"
            return 1
        fi
        curl -sL -o "${xpi}" "${url}" || return 1
        debug "  Download complete"
    fi
    
    debug "Get addons name from the package"
    name=$(unzip -p "${xpi}" manifest.json | jq -r ".name")
    if [ "${name}" == "__MSG_name__" ]; then
        name=$(unzip -p "${xpi}" _locales/en_US/messages.json 2>/dev/null | jq -r ".name.message")
    fi
    info "  Addon name: '${name}'"
    profile=$(get_profile_path)
    extensions_path=${profile}/extensions
    mkdir -p "${extensions_path}" 2>/dev/null
    addon_id=$(unzip -p "${xpi}" manifest.json | jq -r .applications.gecko.id)
    info "  Addon internal ID: ${addon_id}"
    new_filepath="${extensions_path}/${addon_id}.xpi"
    debug "Checking ${new_filepath}..."
    if [ -f "$new_filepath" ]; then
        debug "  File already exists: $new_filepath"
        debug "  Skipping installation for addon $name."
    else
        debug "  Install addon into the ${extensions_path}"
        cp -v "${xpi}" "${new_filepath}"
    fi
    rm -f "${xpi}"
    info "Installation addon '${name}' - complete"
    #info "-- Firefox addons list --"
    #ls "${extensions_path}" | sort
}



if [ "$(uname -s)" != "Darwin" ]; then
    echo "Error: incorrect OS. You can run this script on Mac OS only"
    exit 1
fi
mkdir -p "${CACHE}" 2>/dev/null

case "${1:-"start"}" in
    start|create) start_sandbox ;;
    delete|remove|cleanup) cleanup_sandbox ;;
    close) close_and_delete_app ;;
    help|--help) show_help ;;
    *) echo "Error: unknow command '${1}'."
esac


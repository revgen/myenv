#!/usr/bin/env bash
# #############################################################################
## Usage: {SCRIPT_NAME} [mount/umount/info/open/cd]
# #############################################################################
PRIVATE_DISK_BACKUP_DIRECTORY="${PRIVATE_DISK_BACKUP_DIRECTORY:-"${BACKUP_TARGET}"}"

script_name="$(basename "${0}")"
private_image=${HOME}/.local/var/${USER}-private-workspace
mount_point=${HOME}/Workspace/private
disk_name="$(basename "${private_image}")"
if [ ! -e "${private_image}" ]; then
  private_image="${private_image}.sparsebundle"
  disk_name="$(basename "${private_image%.*}")"
fi

show_help() {
  sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"${0##*/}"'/g'
  exit 1
}

umount_image() {
  echo "Unmounting '${mount_point}'..."
  if mount | grep -q "${mount_point}"; then
    hdiutil detach "${mount_point}" -force
    echo "Done"
  else
    echo "Disk is not mounted to the '${mount_point}'."
  fi
}

mount_image() {
  echo "Mounting '${disk_name}' to '${mount_point}'..."
  if mount | grep -q "${mount_point}"; then
    show_mount_point
    return 1
  fi
  mkdir -p "${mount_point}" || exit 1
  if [ ! -e "${private_image}" ]; then
    echo "Error: '${private_image}' not found."
    return 1
  fi
  hdiutil attach -mountpoint "${mount_point}" "${private_image}" || return 1
  show_mount_point
}

show_mount_point() {
  if mount | grep -q "${mount_point}"; then
    echo "Disk '${disk_name}' mounted to '${mount_point}':"
    ls -ahl "${mount_point}/"
  else
    echo "Disk '${private_image}' not mounted."
  fi
}

open_mount_point() {
  if mount | grep -q "${mount_point}"; then
    open "${mount_point}"
  else
    echo "Disk '${private_image}' not mounted."
  fi
}

backup_private_image() {
  #env | sort > /tmp/crontab.log
  flag_file="/var/tmp/${disk_name}.exec-flag.txt"
  flag="$(head -n 1 "${flag_file}" 2>/dev/null)"
  today="$(date +"%Y-%m-%d")"
  if [ "${today}" == "${flag}" ] && [ "${1}" != "--force" ]; then
    log "The script already executed today. Skip."
    exit 0
  fi
  if [ -z "${PRIVATE_DISK_BACKUP_DIRECTORY}" ]; then
    log "Error: variable PRIVATE_DISK_BACKUP_DIRECTORY is empty. Skip backup."
    exit 1
  fi
  backup_path="${PRIVATE_DISK_BACKUP_DIRECTORY}/${disk_name}.backup-$(date +"%u")"
  log "Backup Disk '${disk_name}' to '${backup_path}'"
  echo "" >> "${HOME}/.${script_name}.log"
  rsync -av "${private_image}" "${backup_path}" 2>&1 >> "${HOME}/.${script_name}.log" 
  errcode=$?
  if [ "${errcode}" == "0" ]; then
    size="$(du -sh "${backup_path}" | awk '{print $1}')"
    notification "Size: ${size}\nPath: ${backup_path}" "Backup - Success"
    echo "${today}" > "${flag_file}"
  else
    notification "Error: ${errcode}\nPath: ${backup_path}" "Backup - ERROR"
    exit 1
  fi
}

log() {
  msg="${@}"
  echo "${msg}"
  echo "$(date +"%FT%T") ${msg}" >> "${HOME}/.${script_name}.log"
}

notification() {
  message="${1}"
  subtitle="${2}"
  title="${3:-"${script_name}"}"
  msg="Send notification: title='${title}', subtitle='${subtitle}', message='${message}'"
  log "${msg}"
  osascript -e "display notification \"${message}\" with title \"${title}\" subtitle \"${subtitle}\" "
}

case "${1:-mount}" in
    help|--help|-h|-H)	show_help;;
    mount|--mount|-M)	mount_image || exit 1 ;;
    umount|--umount|-U)	umount_image || exit 1 ;;
    open|--open)	open_mount_point ;;
    backup|--backup)	shift; backup_private_image "${@}" ;;
    info|--info|-I|status|--status) show_mount_point || exit 1 ;;
    *) echo "Error: unknown command '${1}'."; exit 1 ;;
esac
